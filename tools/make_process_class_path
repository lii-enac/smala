djnn_include_path_only=$2
tmpfile=$(mktemp)
printf "#include <map>\n#include <string>\n\nnamespace Smala { std::map<std::string, std::string> process_class_path = {\n" > $1
(cd $djnn_include_path_only && find * -type f -name "*.h" -not -path "*/ext/*" -not -path "exec_env/time_internal.h" | xargs grep "\s*class " | grep -v ";" | sed -e s/:// | awk '{print $3," ",$1}' > ${tmpfile})
awk '{print "{\""$1"\""",""\""$2"\"""},"}' ${tmpfile} >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/arithmetic.h     | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/arithmetic.h\"},"}' >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/math_functions.h | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/math_functions.h\"},"}' >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/trigonometry.h   | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/trigonometry.h\"},"}' >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/text.h           | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/text.h\"},"}' >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/previous.h       | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/previous.h\"},"}' >> $1
grep 'typedef.*[[:alpha:]]*;$'  ${djnn_include_path_only}/base/deref.h          | awk '{print $NF}' | sed "s/;//" | awk '{print "{\""$1"\",\"base/deref.h\"},"}' >> $1
printf "{\"MultiConnector\",\"base/connector.h\"},\n" >> $1
printf "{\"MultiAssignment\",\"core/control/assignment.h\"},\n" >> $1
printf "{\"AbstractProperty\",\"core/property/abstract_property.h\"},\n" >> $1
printf "{\"loadFromXML\",\"core/xml/xml.h\"},\n" >> $1
printf "{\"AbstractProperty\",\"core/property/abstract_property.h\"},\n" >> $1
printf '{"",""}};\n}\n' >> $1
rm $tmpfile
