%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: smala
file_extensions: [sma]
scope: source.sma

variables:
  function_sma: 'run|stop|delete|notify|merge|dump|with|from|loadFromXML|addChild|addChildrenTo|find|clone|repeat|isString|getInt|getDouble|getBool|getString|getRef|print|toString'
  deprecated_sma: 'remove'

contexts:
  main:

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.sma
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: comment.line.sma
      push: line_comment

    - match: '/\*'
      scope: comment.block.sma
      push: block_comment
    
    - match: "{"
      push:
        - match: "}"
          pop: true
        - include: main

    - match: ';\s*$'
      scope: invalid.illegal

    - match: '%{'
      push: Packages/C++/C++.sublime-syntax
      with_prototype:
        - match: '%}'
          pop: true

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.

    - match: '_action_\n'
      scope: keyword.other.sma
      push: native_action

    - match: '\b(use|import|aka|_main_|_define_|_action_|_native_code_|for|if|then|else|while|int|double|string|_src_|_keep_|)\b'
      scope: keyword.other.sma

    - match: '\s*<<\s*|\s*=>\s*|\s*=:>\s*|\s*=:\s*|\s*!?->!?\s*|\s*::>\s*|\s*::\s*|\s*\|->\s*'
      scope: keyword.operator.sma

    - match: '^\s*(\b[A-Z].[a-zA-Z0-9]*\b)'
      captures:
        1: storage.type.sma

    # Numbers
    - match: '\b(-)?[0-9]+(.[0-9]*)?\b'
      scope: constant.numeric.sma

    #smala functions name
    - match: \b({{function_sma}})\b
      scope: storage.type

    #smala functions name
    - match: \b({{deprecated_sma}})\b
      scope: invalid.deprecated

    ##################
    # Exp√©rimental : try to detect imperative code such as :
    # foo = bar
    # if then else
    # while
    # for ...
    # 

    # ## ALMOST WORKING
    # - match: '^(?!.*for)\s*(.*\s=)\s'
    #   captures:
    #      1: source.imperatif

    # - match: '^(?:(?!\bfor\b).)\s*(.*--)$'
    #   captures:
    #      1: source.imperatif

    # - match: '^(?:(?!\bfor\b).)\s*(.*(?<!C)\+\+)$'
    #   captures:
    #      1: source.imperatif
    # END OF ALMOST WORKING

    # NOT WORKING YET
    # test for more complex regexp too keep comment and function color
    ## - match: '\s*(.*(\s=\s).*\b({{function_sma}})\b.*)'
    ##   captures:
    ##      1: source.imperatif
    ##      3: storage.type

    ## - match: '\s*(.*(\s=\s).*)'
    ##   captures:
    ##      1: source.imperatif

    ######## END OF Experimental

  double_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.sma
    - match: '\\.'
      scope: constant.character.escape.sma
    - match: '"'
      scope: punctuation.definition.string.end.sma
      pop: true

  line_comment:
    - meta_scope: comment.line.sma
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.sma
    - match: '\*/'
      pop: true

  native_action:
    - match: '^([\w\-]+)'
      scope : storage.type.function
    - match: '\)'
      pop: true
    - include: main

  prototype:
    - include: comments


